name: Build Redis

on:
  workflow_call:
    inputs:
      release_version:
        required: true
        type: string
      make_latest:
        required: false
        type: boolean
        default: false
      prerelease:
        required: false
        type: boolean
        default: false
    outputs:
      release_version:
        description: "The version of Redis being built"
        value: ${{ jobs.prepare.outputs.release_version }}

jobs:
  prepare:
    runs-on: windows-latest
    outputs:
      release_version: ${{ env.RELEASE_VERSION }}
      redis_dist: ${{ env.REDIS_DIST }}
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup environment
        id: setup
        run: |
          $version = "${{ inputs.release_version }}"
          Add-Content -Path $env:GITHUB_ENV -Value "RELEASE_VERSION=$version"
          Add-Content -Path $env:GITHUB_ENV -Value "REDIS_DIST=Redis-$version-Windows-x64"
          
          Invoke-WebRequest -Uri "https://github.com/ctripcorp/Redis-On-Rocks/archive/refs/heads/feat/xredis_dev.zip" -OutFile "redis-6.0.9.zip"
          
          $releaseInfo = ConvertFrom-Json(Invoke-WebRequest -Headers @{'Authorization' = 'Bearer ${{ secrets.GITHUB_TOKEN }}'} -Uri "https://api.github.com/repos/redis/redis/releases/tags/$version").Content
          $releaseInfo.body -Replace '\#1', 'https://github.com/redis/redis/pull/1' | Set-Content .\redis_latest_body.txt

      - name: Setup dotnet
        uses: actions/setup-dotnet@v4
  
      - name: Publish RedisService.exe
        run: |
          dotnet publish -c Release -r win-x64 --sc -o publish
      
      - name: Upload source and RedisService.exe
        uses: actions/upload-artifact@v4
        with:
          name: redis-source
          path: |
            redis-6.0.9.zip
            redis_latest_body.txt
            publish

  build-msys2:
    needs: prepare
    runs-on: windows-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Download source
        uses: actions/download-artifact@v4
        with:
          name: redis-source
      
      - name: Set environment variables
        run: |
          Add-Content -Path $env:GITHUB_ENV -Value "RELEASE_VERSION=${{ needs.prepare.outputs.release_version }}"
          Add-Content -Path $env:GITHUB_ENV -Value "REDIS_DIST=${{ needs.prepare.outputs.redis_dist }}"
   
      - name: Cache MSYS2 packages
        uses: actions/cache@v4
        with:
          path: |
            C:/msys64/var/cache/pacman/pkg
            C:/msys64/usr/bin
          key: msys2-${{ runner.os }}-${{ hashFiles('**/*.yml') }}
          restore-keys: msys2-${{ runner.os }}-

      - uses: msys2/setup-msys2@v2
        with:
          update: true
          install: gcc make pkg-config libopenssl openssl-devel zip
          
      - name: Build Redis with MSYS2
        run: |
          workspace=$(pwd)
          
          # Prepare source code
          sed -i 's/__GNU_VISIBLE/1/' /usr/include/dlfcn.h
          tar -xzf redis-${{ env.RELEASE_VERSION }}.tar.gz
          cd redis-${{ env.RELEASE_VERSION }}/src && ./mkreleasehdr.sh
          sed -i 's/\"\;/\"/' asciilogo.h
          echo '" Redis for Windows Project Home \n"' >> asciilogo.h
          echo '" https://github.com/redis-windows/redis-windows  \n\n";' >> asciilogo.h
          cd ..
          
          # Build Redis
          make BUILD_TLS=yes CFLAGS="-Wno-char-subscripts -O0" -j$(nproc)
          
          # Create basic package (without service)
          cd $workspace
          mkdir -p ${{ env.REDIS_DIST }}-msys2
          find redis-${{ env.RELEASE_VERSION }} -mindepth 1 -maxdepth 2 -type f -regex '.*\(\.exe\|\.conf\)' -exec cp -f "{}" "${{ env.REDIS_DIST }}-msys2" \;
          cp README.md README.zh_CN.md start.bat /usr/bin/msys-2.0.dll /usr/bin/msys-crypto-3.dll /usr/bin/msys-ssl-3.dll /usr/bin/msys-gcc_s-seh-1.dll /usr/bin/msys-stdc++-6.dll ${{ env.REDIS_DIST }}-msys2
          sed -i 's/pidfile \/var\/run/pidfile ./' ${{ env.REDIS_DIST }}-msys2/redis.conf
          zip -q -r ${{ env.REDIS_DIST }}-msys2.zip ${{ env.REDIS_DIST }}-msys2
          
          # Create service package
          cp -r ${{ env.REDIS_DIST }}-msys2 ${{ env.REDIS_DIST }}-msys2-with-Service
          cp install_redis_service.bat uninstall_redis_service.bat publish/* ${{ env.REDIS_DIST }}-msys2-with-Service/
          zip -q -r ${{ env.REDIS_DIST }}-msys2-with-Service.zip ${{ env.REDIS_DIST }}-msys2-with-Service
        shell: msys2 {0}
            
      - name: Verify MSYS2 version
        run: |
          $REDIS_MSYS2_VERSION_INFO=(./${{ env.REDIS_DIST }}-msys2-with-Service/redis-server.exe --version )
          echo $REDIS_MSYS2_VERSION_INFO
          If ( -not ( $REDIS_MSYS2_VERSION_INFO -match "${{ env.RELEASE_VERSION }}" ) ) { 
            Write-Output "MSYS2 verification failed. Expected: ${{ env.RELEASE_VERSION }}, Got: $REDIS_MSYS2_VERSION_INFO"
            exit 1
          }

      - name: Test Redis with MSYS2
        timeout-minutes: 5
        run: |
          try {
            Start-Process -NoNewWindow -FilePath ".\${{ env.REDIS_DIST }}-msys2-with-Service\redis-server.exe"
            Start-Sleep -Seconds 2
            $value = .\${{ env.REDIS_DIST }}-msys2-with-Service\redis-cli.exe SET test_key test_value
            if ($LASTEXITCODE -ne 0) { throw "Failed to set test key" }
            $value = .\${{ env.REDIS_DIST }}-msys2-with-Service\redis-cli.exe GET test_key
            if ($value -ne "test_value") { throw "Test failed" }
          }
          finally {
            Stop-Process -Name "redis-server" -ErrorAction SilentlyContinue
          }

      - name: Calculate hash values for MSYS2 builds
        run: |
          'MSYS2 Builds Hashes' | Out-File hashes-msys2.txt
          '====================' | Out-File -Append hashes-msys2.txt
          Get-FileHash .\${{ env.REDIS_DIST }}-msys2.zip | Format-List | Out-File -Append hashes-msys2.txt
          Get-FileHash .\${{ env.REDIS_DIST }}-msys2-with-Service.zip | Format-List | Out-File -Append hashes-msys2.txt
      
      - name: Upload MSYS2 builds
        uses: actions/upload-artifact@v4
        with:
          name: redis-msys2-builds
          path: |
            ${{ env.REDIS_DIST }}-msys2.zip
            ${{ env.REDIS_DIST }}-msys2-with-Service.zip
            hashes-msys2.txt

  build-cygwin:
    needs: prepare
    runs-on: windows-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Download source
        uses: actions/download-artifact@v4
        with:
          name: redis-source
      
      - name: Set environment variables
        run: |
          Add-Content -Path $env:GITHUB_ENV -Value "RELEASE_VERSION=${{ needs.prepare.outputs.release_version }}"
          Add-Content -Path $env:GITHUB_ENV -Value "REDIS_DIST=${{ needs.prepare.outputs.redis_dist }}"

      - name: Cache Cygwin packages
        uses: actions/cache@v4
        with:
          path: |
            C:/cygwin64
            C:/cygwin64/var/cache
          key: cygwin-${{ runner.os }}-${{ hashFiles('**/*.yml') }}
          restore-keys: cygwin-${{ runner.os }}-

      - uses: cygwin/cygwin-install-action@master
        with:
          packages: make gcc-core gcc-g++ pkg-config libssl-devel zip
          
      - name: Build Redis with Cygwin
        env:
          CYGWIN_NOWINPATH: 1
        run: >-
          workspace=$(pwd) ;
          sed -i 's/__GNU_VISIBLE/1/' /usr/include/dlfcn.h ;
          tar -xzf redis-${{ env.RELEASE_VERSION }}.tar.gz ;
          cd redis-${{ env.RELEASE_VERSION }}/src && ./mkreleasehdr.sh ;
          sed -i 's/\"\;/\"/' asciilogo.h ;
          echo '" Redis for Windows Project Home \n"' >> asciilogo.h ;
          echo '" https://github.com/redis-windows/redis-windows  \n\n";' >> asciilogo.h ;
          cd .. ;
          make BUILD_TLS=yes CFLAGS="-Wno-char-subscripts -O0" -j$(nproc) ;
          cd $workspace ;
          mkdir -p ${{ env.REDIS_DIST }}-cygwin ;
          find redis-${{ env.RELEASE_VERSION }} -mindepth 1 -maxdepth 2 -type f -regex '.*\(\.exe\|\.conf\)' -exec cp -f "{}" "${{ env.REDIS_DIST }}-cygwin" \; ;
          cp README.md README.zh_CN.md start.bat /bin/cygcrypto-3.dll /bin/cygwin1.dll /bin/cygssl-3.dll /bin/cygz.dll /bin/cyggcc_s-seh-1.dll /bin/cygstdc++-6.dll ${{ env.REDIS_DIST }}-cygwin ;
          sed -i 's/pidfile \/var\/run/pidfile ./' ${{ env.REDIS_DIST }}-cygwin/redis.conf ;
          zip -q -r ${{ env.REDIS_DIST }}-cygwin.zip ${{ env.REDIS_DIST }}-cygwin ;
          cp -r ${{ env.REDIS_DIST }}-cygwin ${{ env.REDIS_DIST }}-cygwin-with-Service ;
          cp install_redis_service.bat uninstall_redis_service.bat publish/* ${{ env.REDIS_DIST }}-cygwin-with-Service/ ;
          zip -q -r ${{ env.REDIS_DIST }}-cygwin-with-Service.zip ${{ env.REDIS_DIST }}-cygwin-with-Service
        shell: bash

      - name: Verify Cygwin version
        run: |
          $REDIS_CYGWIN_VERSION_INFO=(./${{ env.REDIS_DIST }}-cygwin-with-Service/redis-server.exe --version )
          echo $REDIS_CYGWIN_VERSION_INFO
          If ( -not ( $REDIS_CYGWIN_VERSION_INFO -match "${{ env.RELEASE_VERSION }}" ) ) { 
            Write-Output "Cygwin verification failed. Expected: ${{ env.RELEASE_VERSION }}, Got: $REDIS_CYGWIN_VERSION_INFO"
            exit 1
          }

      - name: Test Redis with Cygwin
        timeout-minutes: 5
        run: |
          try {
            Start-Process -NoNewWindow -FilePath ".\${{ env.REDIS_DIST }}-cygwin-with-Service\redis-server.exe"
            Start-Sleep -Seconds 2
            $value = .\${{ env.REDIS_DIST }}-cygwin-with-Service\redis-cli.exe SET test_key test_value
            if ($LASTEXITCODE -ne 0) { throw "Failed to set test key" }
            $value = .\${{ env.REDIS_DIST }}-cygwin-with-Service\redis-cli.exe GET test_key
            if ($value -ne "test_value") { throw "Test failed" }
          }
          finally {
            Stop-Process -Name "redis-server" -ErrorAction SilentlyContinue
          }

      - name: Calculate hash values for Cygwin builds
        run: |
          'Cygwin Builds Hashes' | Out-File hashes-cygwin.txt
          '====================' | Out-File -Append hashes-cygwin.txt
          Get-FileHash .\${{ env.REDIS_DIST }}-cygwin.zip | Format-List | Out-File -Append hashes-cygwin.txt
          Get-FileHash .\${{ env.REDIS_DIST }}-cygwin-with-Service.zip | Format-List | Out-File -Append hashes-cygwin.txt
      
      - name: Upload Cygwin builds
        uses: actions/upload-artifact@v4
        with:
          name: redis-cygwin-builds
          path: |
            ${{ env.REDIS_DIST }}-cygwin.zip
            ${{ env.REDIS_DIST }}-cygwin-with-Service.zip
            hashes-cygwin.txt

  release:
    needs: [prepare, build-msys2, build-cygwin]
    runs-on: windows-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set environment variables
        run: |
          Add-Content -Path $env:GITHUB_ENV -Value "RELEASE_VERSION=${{ needs.prepare.outputs.release_version }}"
          Add-Content -Path $env:GITHUB_ENV -Value "REDIS_DIST=${{ needs.prepare.outputs.redis_dist }}"
      
      - name: Download all artifacts
        uses: actions/download-artifact@v4
      
      - name: Prepare release
        run: |
          # Combine all hash files
          Get-Content -Path redis-source/redis_latest_body.txt | Out-File -FilePath release_body.txt
          "`nHashes" | Out-File -Append -FilePath release_body.txt
          "=========" | Out-File -Append -FilePath release_body.txt
          Get-Content -Path redis-msys2-builds/hashes-msys2.txt | Out-File -Append -FilePath release_body.txt
          Get-Content -Path redis-cygwin-builds/hashes-cygwin.txt | Out-File -Append -FilePath release_body.txt
          
          # Add workflow information
          "From workflow: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}" | Out-File -Append -FilePath release_body.txt
      
      - name: Release
        uses: softprops/action-gh-release@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          name: Redis ${{ env.RELEASE_VERSION }} for Windows
          tag_name: ${{ env.RELEASE_VERSION }}
          body_path: release_body.txt
          make_latest: ${{ inputs.make_latest }}
          prerelease: ${{ inputs.prerelease }}
          files: |
            redis-cygwin-builds/${{ env.REDIS_DIST }}-cygwin.zip
            redis-cygwin-builds/${{ env.REDIS_DIST }}-cygwin-with-Service.zip
            redis-msys2-builds/${{ env.REDIS_DIST }}-msys2.zip
            redis-msys2-builds/${{ env.REDIS_DIST }}-msys2-with-Service.zip
